server:
  port: 9000
  shutdown: graceful                    # 우아한 종료를 위한 활성화
  netty:
    connection-timeout: 2s              # 서버와 TCP 연결을 수립하기 위해 기다리는 시간
    idle-timeout: 15s                   # 데이터가 전송되지 않는 경우 TCP 연결을 닫기 전에 기다리는 시간

spring:
  application:
    name: cns-edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s     # 15초간의 우아한 종료기간을 둔다
  config:
    import: "optional:configserver:"
  data.redis:
    connect-timeout: 2s                 # 연결이 수립되기까지 기다리는 시간의 한도
    host: localhost                     # 레디스 호스트 기본값
    port: 6379                          # 레디스 포트 기본값
    timeout: 1s                         # 응답을 받기까지 기다리는 시간의 한도
  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge
  security:
    oauth2:
      client:
        registration:
          keycloak:                     # 스프링 보안에서 클라이언트 등록을 식별하는 이름 ("registrationId" 라고 부른다)
            client-id: cns-edge-service   # 키클록에 정의된 OAuth2 클라이언트 식별자
            client-secret: polar-keycloak-secret    # 클라이언트가 키클록과 인증하기 위해 사용하는 공유 시크릿
            scope: openid,roles         # 클라이언트가 접근 권한을 갖기를 원하는 영역의 목록. openid 영역은 OAuth2에서 OIDC 인증을 수행한다
                                        # 범위의 목록에 'roles' 를 추가함으로써 엣지 서비스는 사용자의 역할에 대한 정보를 제공받는다
        provider:
          keycloak:                     # 위의 "registrationId" 와 같은 이름
            issuer-uri: http://localhost:8080/realms/PolarBookshop    # 특정 영역에 대한 OAuth2와 OIDC 관련 모든 엔드포인트의 정보를 제공하는 키클록 URL
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000     # 설정 서버에 연결될 때까지 기다리는 시간(밀리초)
      request-read-timeout: 5000        # 설정 서버에서 설정 데이터를 읽을 때까지 기다리는 시간(밀리초)
      fail-fast: false                  # 설정 서버 연결 실패를 치명적 오류로 인식 -> retry 작동 활성화를 위한 조건
      # production 에서는 해당 값을 true 로 설정
      retry:
        max-attempts: 6                 # 시도의 최대 횟수
        initial-interval: 1000          # 최초 재시도 지연 시간(밀리초)
        max-interval: 2000              # 재시도 지연 최대 시간(밀리초)
        multiplier: 1.1                 # 지연 시간 계산 승수
    gateway:
      httpclient:
        connect-timeout: 2000           # 연결을 수립하기까지의 타임아웃(밀리초)
        response-timeout: 5s            # 응답을 받을때까지의 타임아웃
        pool:
          type: elastic                 # 연결 풀 유형 (elastic, fixed, disable 중 하나)
          max-idle-time: 15s            # 클라이언트가 서버에 요청을 보내지 않는 상태에서 연결을 유지할 수 있는 최대 시간
          max-life-time: 60s            # 클라이언트가 서버와 연결된 후 유지될 수 있는 최대 시간. 해당 시간이 지나면 연결은 강제로 종료됨.
      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books   # URI 값은 환경변수로 오거나 해당 환경변수가 없는 경우 오른쪽의 기본값을 사용한다
          predicates:
            - Path=/books/**            # 일치하는 경로를 술어로 사용한다
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback    # 써킷이 오픈되었을때 fallback url 호출
                                                          # Retry 필터가 해당 route 에도 적용되므로 모든 재시도가 실패하는 경우에도 fallback url 호출됨
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
                # 서킷 브레이커에 대해 정의된 폴백이 없음
        - id: spa-route
          uri: ${SPA_URL:http://localhost:9004}
          predicates:
            - Path=/,/*.css,/*.js,/favicon.ico    # 루트 엔드포인트와 SPA 의 정적 리소스 경로
      default-filters:
        - SaveSession                   # 요청을 서비스로 전달하기 전에 세션 데이터를 저장한다
        - TokenRelay                    # 다른 서비스를 호출할때 액세스 토큰 전달을 활성화한다
        - name: RequestRateLimiter      # 게이트웨이 필터로 요청 사용률 제한 설정. 레디스에 문제가 생겨 사용할 수 없는 경우 사용률 제한은 일시적으로 비활성화됨.
          args:
            redis-rate-limiter:
              replenishRate: 10         # 초당 버킷에 떨어지는 토큰의 수
              burstCapacity: 20         # 최대 20개 요청까지 허용 (스파이크 요청에 대한 처리를 위해 설정. 연달아 발생하는 스파이크에 대해서는 버스트가 허용되지 않는다)
              requestedTokens: 1        # 하나의 요청 처리에 몇 개의 토큰이 사용되는지 지정
        - name: RemoveMultipleResponseHeaders   # RequestRateLimiter 정보를 응답 헤더에서 제거하는 필터
          args:
            headersToRemove: X-Ratelimit-Burst-Capacity,X-Ratelimit-Remaining,X-Ratelimit-Replenish-Rate,X-Ratelimit-Requested-Tokens
        - name: Retry
          args:
            retries: 3
            methods: GET                # GET 요청만 재시도
            series: SERVER_ERROR        # 5xx 오류에 대해서만 재시도
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException  # 지정한 예외가 발생할 때만 재시도
            backoff:                    # 재시도는 firstBackoff * (factor^n) 공식을 사용해 계산
              firstBackoff: 50ms
              maxBackoff: 500ms
              factor: 2
              basedOnPreviousValue: false   # true 로 설정하면 공식은 prevBackoff * factor 가 된다.
                                            # 이전 재시도의 성공 여부에 따라 다음 재시도 간격이 결정됨
                                            # 이전 재시도가 성공 -> 초기 재시도 간격으로 재설정됨. 이전 재시도가 실패 -> 해당 이전 재시도 간격으로 재시도 간격을 계산

resilience4j:
  circuitbreaker:
    configs:
      default:    # 모든 서킷 브레이커에 대한 기본 설정
        slidingWindowSize: 20           # 써킷이 닫힌 상태일때 호출의 결과를 기록하는데 사용하는 슬라이딩 윈도의 크기
        permittedNumberOfCallsInHalfOpenState: 5    # 써킷이 반개방 상태일때 허용되는 호출의 수
        failureRateThreshold: 50        # 실패율이 임계값 이상이면 써킷은 개방상태로 바뀐다
        waitDurationInOpenState: 15000  # 개방 상태에서 반개방 상태로 가기까지 기다릴 시간 (밀리초)
  timelimiter:
    configs:
      default:    # 모든 시간 제한에 대한 기본 설정
                  # 네티 HTTP 클라이언트 응답 타임아웃보다 높은 우선순위를 갖는다
        timeoutDuration: 5s

logging:
  group:
    circuitbreaker: io.github.resilience4j, org.springframework.cloud.circuitbreaker
  level:
    circuitbreaker: info
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

info:
  system: Polar Bookshop      # info 로 시작하는 속성은 info 엔드포인트로 반환된다.

management:
  endpoints:
    web:
      exposure:
        include: configprops, env, gateway, health, heapdump, info, loggers, mappings, prometheus
  endpoint:
    health:
      show-details: always       # 애플리케이션의 상세한 상태 정보
      show-components: always   # 애플리케이션이 사용하는 구성 요소에 대한 정보
      probes:
        enabled: true
      group:
        readiness:
          include: readinessState,redis   # 준비 상태 프로브는 애플리케이션의 준비 상태와 레디스의 상태를 모두 확인한다
  metrics:
    tags:
      application: ${spring.application.name}             # 애플리케이션 이름으로 마이크로미터 공통 태그를 추가한다. 이로 인해 모든 매트릭에 적용되는 프로메데우스 레이블이 만들어진다.
  info:
    env:
      enabled: true     # info 로 시작하는 환경변수 정보를 info 엔드포인트를 통해 노출한다
    java:
      enabled: true
    os:
      enabled: true